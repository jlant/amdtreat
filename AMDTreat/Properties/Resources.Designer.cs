//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AMDTreat.Properties {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("AMDTreat.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The calculated limstone layer bottom width is less than 10 ft.
        ///
        ///The combination of the pond length and width, layer depths, pond side slope, and/or bottom length to width ratio is causing the error.
        ///
        ///All output values are invalid and should not be used.
        ///
        ///To resolve, change the pond length and width, layer depths, pond side slope, and/or bottom length.  
        ///
        ///Note, the current depth of the pond should be less than the maximum allowable depth of the pond..
        /// </summary>
        internal static string errorPondALD {
            get {
                return ResourceManager.GetString("errorPondALD", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The calculated limstone layer bottom width is less than 10 ft.
        ///
        ///The combination of the pond length and width, layer depths, pond side slope, and/or bottom length to width ratio is causing the error.
        ///
        ///All output values are invalid and should not be used.
        ///
        ///To resolve, change the pond length and width, layer depths, pond side slope, and/or bottom length.  
        ///
        ///Note, the current depth of the pond should be less than the maximum allowable depth of the pond..
        /// </summary>
        internal static string errorPondBIO {
            get {
                return ResourceManager.GetString("errorPondBIO", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Please adjust the Bio Mix material percentages to make sure that the Wood Chips Percentage is greater than or equal to 0%..
        /// </summary>
        internal static string errorPondBIOWoodChips {
            get {
                return ResourceManager.GetString("errorPondBIOWoodChips", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to .
        /// </summary>
        internal static string errorPondCaustic {
            get {
                return ResourceManager.GetString("errorPondCaustic", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to .
        /// </summary>
        internal static string errorPondClarifier {
            get {
                return ResourceManager.GetString("errorPondClarifier", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to .
        /// </summary>
        internal static string errorPondDL {
            get {
                return ResourceManager.GetString("errorPondDL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to .
        /// </summary>
        internal static string errorPondLS {
            get {
                return ResourceManager.GetString("errorPondLS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The calculated limstone layer bottom width is less than 10 ft.
        ///
        ///The combination of the pond length and width, layer depths, pond side slope, and/or bottom length to width ratio is causing the error.
        ///
        ///All output values are invalid and should not be used.
        ///
        ///To resolve, change the pond length and width, layer depths, pond side slope, and/or bottom length.  
        ///
        ///Note, the current depth of the pond should be less than the maximum allowable depth of the pond..
        /// </summary>
        internal static string errorPondLSB {
            get {
                return ResourceManager.GetString("errorPondLSB", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The calculated limstone layer bottom width is 0 ft or less than 0 ft.
        ///
        ///The combination of the pond length and width, layer depths, pond side slope, and/or bottom length to width ratio is causing a major error.
        ///
        ///All output values are invalid.
        ///
        ///To resolve, change the pond length and width, layer depths, pond side slope, and/or bottom length.  
        ///
        ///Note, the current depth of the pond should be less than the maximum allowable depth of the pond..
        /// </summary>
        internal static string errorPondMajorALD {
            get {
                return ResourceManager.GetString("errorPondMajorALD", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The calculated limstone layer bottom width is 0 ft or less than 0 ft.
        ///
        ///The combination of the pond length and width, layer depths, pond side slope, and/or bottom length to width ratio is causing a major error.
        ///
        ///All output values are invalid.
        ///
        ///To resolve, change the pond length and width, layer depths, pond side slope, and/or bottom length.  
        ///
        ///Note, the current depth of the pond should be less than the maximum allowable depth of the pond..
        /// </summary>
        internal static string errorPondMajorBIO {
            get {
                return ResourceManager.GetString("errorPondMajorBIO", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to .
        /// </summary>
        internal static string errorPondMajorCaustic {
            get {
                return ResourceManager.GetString("errorPondMajorCaustic", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to .
        /// </summary>
        internal static string errorPondMajorClarifier {
            get {
                return ResourceManager.GetString("errorPondMajorClarifier", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to .
        /// </summary>
        internal static string errorPondMajorDL {
            get {
                return ResourceManager.GetString("errorPondMajorDL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to .
        /// </summary>
        internal static string errorPondMajorLS {
            get {
                return ResourceManager.GetString("errorPondMajorLS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The calculated limstone layer bottom width is 0 ft or less than 0 ft.
        ///
        ///The combination of the pond length and width, layer depths, pond side slope, and/or bottom length to width ratio is causing a major error.
        ///
        ///All output values are invalid.
        ///
        ///To resolve, change the pond length and width, layer depths, pond side slope, and/or bottom length.  
        ///
        ///Note, the current depth of the pond should be less than the maximum allowable depth of the pond..
        /// </summary>
        internal static string errorPondMajorLSB {
            get {
                return ResourceManager.GetString("errorPondMajorLSB", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The calculated limstone layer bottom width is 0 ft or less than 0 ft.
        ///
        ///The combination of the pond length and width, layer depths, pond side slope, and/or bottom length to width ratio is causing a major error.
        ///
        ///All output values are invalid.
        ///
        ///To resolve, change the pond length and width, layer depths, pond side slope, and/or bottom length.  
        ///
        ///Note, the current depth of the pond should be less than the maximum allowable depth of the pond..
        /// </summary>
        internal static string errorPondMajorMRB {
            get {
                return ResourceManager.GetString("errorPondMajorMRB", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The calculated layer bottom width is 0 ft or less than 0 ft.
        ///
        ///The combination of the pond length and width, layer depths, pond side slope, and/or bottom length to width ratio is causing a major error.
        ///
        ///All output values are invalid.
        ///
        ///To resolve, change the pond length and width, layer depths, pond side slope, and/or bottom length.  
        ///
        ///Note, the current depth of the pond should be less than the maximum allowable depth of the pond..
        /// </summary>
        internal static string errorPondMajorPONDS {
            get {
                return ResourceManager.GetString("errorPondMajorPONDS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to .
        /// </summary>
        internal static string errorPondMajorSiteDevelopment {
            get {
                return ResourceManager.GetString("errorPondMajorSiteDevelopment", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The calculated limstone layer bottom width is 0 ft or less than 0 ft.
        ///
        ///The combination of the pond length and width, layer depths, pond side slope, and/or bottom length to width ratio is causing a major error.
        ///
        ///All output values are invalid.
        ///
        ///To resolve, change the pond length and width, layer depths, pond side slope, and/or bottom length.  
        ///
        ///Note, the current depth of the pond should be less than the maximum allowable depth of the pond..
        /// </summary>
        internal static string errorPondMajorVFP {
            get {
                return ResourceManager.GetString("errorPondMajorVFP", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The calculated wetland bottom width is 0 ft or less than 0 ft.
        ///
        ///The combination of the pond length and width, layer depths, pond side slope, and/or bottom length to width ratio is causing a major error.
        ///
        ///All output values are invalid.
        ///
        ///To resolve, change the pond length and width, layer depths, pond side slope, and/or bottom length.  
        ///
        ///Note, the current depth of the pond should be less than the maximum allowable depth of the pond..
        /// </summary>
        internal static string errorPondMajorWetland {
            get {
                return ResourceManager.GetString("errorPondMajorWetland", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The calculated limstone layer bottom width is less than 10 ft.
        ///
        ///The combination of the pond length and width, layer depths, pond side slope, and/or bottom length to width ratio is causing the error.
        ///
        ///All output values are invalid and should not be used.
        ///
        ///To resolve, change the pond length and width, layer depths, pond side slope, and/or bottom length.  
        ///
        ///Note, the current depth of the pond should be less than the maximum allowable depth of the pond..
        /// </summary>
        internal static string errorPondMRB {
            get {
                return ResourceManager.GetString("errorPondMRB", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The calculated layer bottom width is less than 10 ft.
        ///
        ///The combination of the pond length and width, layer depths, pond side slope, and/or bottom length to width ratio is causing the error.
        ///
        ///All output values are invalid and should not be used.
        ///
        ///To resolve, change the pond length and width, layer depths, pond side slope, and/or bottom length.  
        ///
        ///Note, the current depth of the pond should be less than the maximum allowable depth of the pond..
        /// </summary>
        internal static string errorPondPONDS {
            get {
                return ResourceManager.GetString("errorPondPONDS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to .
        /// </summary>
        internal static string errorPondSiteDevelopment {
            get {
                return ResourceManager.GetString("errorPondSiteDevelopment", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The calculated limstone layer bottom width is less than 10 ft.
        ///
        ///The combination of the pond length and width, layer depths, pond side slope, and/or bottom length to width ratio is causing the error.
        ///
        ///All output values are invalid and should not be used.
        ///
        ///To resolve, change the pond length and width, layer depths, pond side slope, and/or bottom length.  
        ///
        ///Note, the current depth of the pond should be less than the maximum allowable depth of the pond..
        /// </summary>
        internal static string errorPondVFP {
            get {
                return ResourceManager.GetString("errorPondVFP", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The calculated wetland bottom width is less than 10 ft.
        ///
        ///The combination of the pond length and width, layer depths, pond side slope, and/or bottom length to width ratio is causing the error.
        ///
        ///All output values are invalid and should not be used.
        ///
        ///To resolve, change the pond length and width, layer depths, pond side slope, and/or bottom length.  
        ///
        ///Note, the current depth of the pond should be less than the maximum allowable depth of the pond..
        /// </summary>
        internal static string errorPondWetland {
            get {
                return ResourceManager.GetString("errorPondWetland", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Aerobic Wetlands are not intented to remove acidity. Alkalinity addition is needed..
        /// </summary>
        internal static string errorPondWetlandMetalRemovalRate {
            get {
                return ResourceManager.GetString("errorPondWetlandMetalRemovalRate", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Increase the inlet or outlet pool lengths or decrease the inlet or outlet depths..
        /// </summary>
        internal static string errorPoolWetlandBottomLength {
            get {
                return ResourceManager.GetString("errorPoolWetlandBottomLength", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A Anoxic Limestone Drain  is.
        /// </summary>
        internal static string infoALD {
            get {
                return ResourceManager.GetString("infoALD", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to AMDTreat, a member of OSMRE&apos;s Technical Innovation and Professional Services (TIPS) suite of software, is a computer application for estimating abatement costs for pollutional mine drainage, commonly referred to as Acid Mine Drainage or AMD..
        /// </summary>
        internal static string infoAmdtreatVFP {
            get {
                return ResourceManager.GetString("infoAmdtreatVFP", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Annual Costs for ALD include routine maintenance such as flushing and adjusting the water level. Estimating the annual costs for passive treatment systems are difficult so a portion of the annual costs is not tagged for a specific use but may accumulate for contingencies.  There are two methods to estimate annual treatment costs for an ALD in AMDTreat. For the first method, users enter a percentage which is multiplied by the ALD capital cost to estimate the annual operations and maintenance cost. The second [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string infoAnnualCostALD {
            get {
                return ResourceManager.GetString("infoAnnualCostALD", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Annual Costs for Bioreactors include routine maintenance such as cleaning debris from inlet and outlet, mowing, and adjusting the water level. Estimating the annual costs for passive treatment systems are difficult so a portion of the annual costs is not tagged for a specific use but may accumulate for contingencies.  There are two methods to estimate annual treatment costs for a Bioreactor in AMDTreat. For the first method, users enter a percentage which is multiplied by the Bioreactor capital cost to esti [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string infoAnnualCostBIO {
            get {
                return ResourceManager.GetString("infoAnnualCostBIO", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to .
        /// </summary>
        internal static string infoAnnualCostCaustic {
            get {
                return ResourceManager.GetString("infoAnnualCostCaustic", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Annual Costs for Conveyance Ditch.
        ///
        ///Percentage of Capital Cost is the user-specified percentage used to estimate the annual operation and maintenance cost.
        ///
        ///Annual Cost Flat Fee allows users can enter a custom calculated or known annual cost for operation and maintenance..
        /// </summary>
        internal static string infoAnnualCostCD {
            get {
                return ResourceManager.GetString("infoAnnualCostCD", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to .
        /// </summary>
        internal static string infoAnnualCostClarifier {
            get {
                return ResourceManager.GetString("infoAnnualCostClarifier", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to User-Specified Annual Chemical Cost - This  method allows users to specify the annual  chemical cost. This method is commonly used by users who know their annual chemical cost and do not require an estimate. 
        ///
        ///Percentage of Capital Cost - The default method for estimating operation and mainteance costs is to assume the annual cost is a percentage of the capital cost to purchase and install the sysetm.  
        ///
        ///Estimate Electrical Cost - AMDTreat estimates the annual electrical cost by using the power requirem [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string infoAnnualCostDL {
            get {
                return ResourceManager.GetString("infoAnnualCostDL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Annual Cost Inputs consists of ....
        /// </summary>
        internal static string infoAnnualCostInputClarifier {
            get {
                return ResourceManager.GetString("infoAnnualCostInputClarifier", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Annual Cost Inputs consists of ....
        /// </summary>
        internal static string infoAnnualCostInputSiteDevelopment {
            get {
                return ResourceManager.GetString("infoAnnualCostInputSiteDevelopment", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to User-Specified Annual Chemical Cost - This  method allows users to specify the annual  chemical cost. This method is commonly used by users who know their annual chemical cost and do not require an estimate. 
        ///
        ///Percentage of Capital Cost - The default method for estimating operation and mainteance costs is to assume the annual cost is a percentage of the capital cost to purchase and install the sysetm.  
        ///
        ///Estimate Electrical Cost - AMDTreat estimates the annual electrical cost by using the power requirem [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string infoAnnualCostLS {
            get {
                return ResourceManager.GetString("infoAnnualCostLS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Annual Costs for Limestone Beds include routine maintenance such as cleaning debris from inlet and outlet, mowing, flushing, and adjusting the water level. Estimating the annual costs for passive treatment systems are difficult so a portion of the annual costs is not tagged for a specific use but may accumulate for contingencies.  There are two methods to estimate annual treatment costs for a Limestone Bed in AMDTreat. For the first method, users enter a percentage which is multiplied by the Limestone Bed c [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string infoAnnualCostLSB {
            get {
                return ResourceManager.GetString("infoAnnualCostLSB", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Annual Costs for Manganese Removal Beds include routine maintenance such as cleaning debris from inlet and outlet, mowing, flushing, and adjusting the water level. Estimating the annual costs for passive treatment systems are difficult so a portion of the annual costs is not tagged for a specific use but may accumulate for contingencies.  There are two methods to estimate annual treatment costs for a Manganese Removal Bed in AMDTreat. For the first method, users enter a percentage which is multiplied by the [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string infoAnnualCostMRB {
            get {
                return ResourceManager.GetString("infoAnnualCostMRB", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Annual Costs for Ponds are ....
        /// </summary>
        internal static string infoAnnualCostPONDS {
            get {
                return ResourceManager.GetString("infoAnnualCostPONDS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Annual Costs for Pumping are ....
        /// </summary>
        internal static string infoAnnualCostPumping {
            get {
                return ResourceManager.GetString("infoAnnualCostPumping", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Annual Costs for Sampling ...
        ///
        ///.
        /// </summary>
        internal static string infoAnnualCostSAMPLING {
            get {
                return ResourceManager.GetString("infoAnnualCostSAMPLING", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to .
        /// </summary>
        internal static string infoAnnualCostSiteDevelopment {
            get {
                return ResourceManager.GetString("infoAnnualCostSiteDevelopment", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Annual Costs for VFP include routine maintenance such as cleaning debris from inlet and outlet, mowing, and adjusting the water level. Estimating the annual costs for passive treatment systems are difficult so a portion of the annual costs is not tagged for a specific use but may accumulate for contingencies.  There are two methods to estimate annual treatment costs for a VFP in AMDTreat. For the first method, users enter a percentage which is multiplied by the VFP capital cost to estimate the annual operat [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string infoAnnualCostVFP {
            get {
                return ResourceManager.GetString("infoAnnualCostVFP", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Annual Costs for Wetlands include routine maintenance such as cleaning debris from inlet and outlet, mowing, cleaning the rock baffles, and adjusting the water level. Estimating the annual costs for passive treatment systems are difficult so a portion of the annual costs is not tagged for a specific use but may accumulate for contingencies.  There are two methods to estimate annual treatment costs for a Wetland in AMDTreat. For the first method, users enter a percentage which is multiplied by the Wetland ca [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string infoAnnualCostWetland {
            get {
                return ResourceManager.GetString("infoAnnualCostWetland", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A Bio Reactor  is.
        /// </summary>
        internal static string infoBIO {
            get {
                return ResourceManager.GetString("infoBIO", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Capital costs include the cost estimates to build the treatment..
        /// </summary>
        internal static string infoCapitalCostALD {
            get {
                return ResourceManager.GetString("infoCapitalCostALD", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Capital costs include the cost estimates to build the pond..
        /// </summary>
        internal static string infoCapitalCostBIO {
            get {
                return ResourceManager.GetString("infoCapitalCostBIO", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Capital costs include the cost estimates to build the treatment..
        /// </summary>
        internal static string infoCapitalCostCaustic {
            get {
                return ResourceManager.GetString("infoCapitalCostCaustic", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Capital costs include the cost estimates to build the ditch..
        /// </summary>
        internal static string infoCapitalCostCD {
            get {
                return ResourceManager.GetString("infoCapitalCostCD", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Capital costs include the cost estimates to build the treatment..
        /// </summary>
        internal static string infoCapitalCostClarifier {
            get {
                return ResourceManager.GetString("infoCapitalCostClarifier", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Capital costs include the cost estimates to build the treatment.
        ///
        ///System Installation - This section develops cost estimates for installing the lime silo system. 
        ///
        ///Cost Multiplier: The default method for estimating installtion costs is to assume the installation cost is 40% of the capital cost of the equipment. 
        ///
        ///User-specified Cost: Users specify the installation cost. 
        ///    .
        /// </summary>
        internal static string infoCapitalCostDL {
            get {
                return ResourceManager.GetString("infoCapitalCostDL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Capital costs include the cost estimates to build the treatment.
        ///
        ///System Installation - This section develops cost estimates for installing the lime slurry system. 
        ///
        ///Cost Multiplier: The default method for estimating installtion costs is to assume the installation cost is 40% of the capital cost of the equipment. 
        ///
        ///User-specified Cost: Users specify the installation cost. 
        ///    .
        /// </summary>
        internal static string infoCapitalCostLS {
            get {
                return ResourceManager.GetString("infoCapitalCostLS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Capital costs include the cost estimates to build the Limestone Bed..
        /// </summary>
        internal static string infoCapitalCostLSB {
            get {
                return ResourceManager.GetString("infoCapitalCostLSB", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Capital costs include the cost estimates to build the Manganese Removal Bed..
        /// </summary>
        internal static string infoCapitalCostMRB {
            get {
                return ResourceManager.GetString("infoCapitalCostMRB", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Capital costs include the cost estimates for constructing a Pond..
        /// </summary>
        internal static string infoCapitalCostPONDS {
            get {
                return ResourceManager.GetString("infoCapitalCostPONDS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Capital costs include the cost estimates for all pumping..
        /// </summary>
        internal static string infoCapitalCostPumping {
            get {
                return ResourceManager.GetString("infoCapitalCostPumping", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Capital costs include the cost estimates for sampling..
        /// </summary>
        internal static string infoCapitalCostSAMPLING {
            get {
                return ResourceManager.GetString("infoCapitalCostSAMPLING", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Contingency - user may specify a contingency cost for a project based on either and pre-determined amount or allow the program to calculate it based on theproject capital costs in order to account for items/features not determined early on in the engineering design process; as the level of design progresses typically the amount of contingency is less..
        /// </summary>
        internal static string infoCapitalCostSiteDevelopment {
            get {
                return ResourceManager.GetString("infoCapitalCostSiteDevelopment", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Capital costs include the cost estimates to build the pond..
        /// </summary>
        internal static string infoCapitalCostVFP {
            get {
                return ResourceManager.GetString("infoCapitalCostVFP", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Capital costs include the cost estimates to build the pond..
        /// </summary>
        internal static string infoCapitalCostWetland {
            get {
                return ResourceManager.GetString("infoCapitalCostWetland", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A Caustic Soda treatment is ....
        /// </summary>
        internal static string infoCaustic {
            get {
                return ResourceManager.GetString("infoCaustic", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A Conveyance Ditch  is.
        /// </summary>
        internal static string infoCD {
            get {
                return ResourceManager.GetString("infoCD", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Methods to estimate chemical consumption.
        ///
        ///Stoichiometric - estimates caustic consumption by multiplying the acidity as CaCO3 by flow (gpm) and using stoichiometric conversions to calculate the amount of caustic soda.
        ///
        ///Titration - users can input the results of performing a bench scale titration of mine drainage to determine the gallons of caustic required to treat each gallon of mine drainage. 
        ///
        ///User-Specified Quantity - allows users to specify the annual amount of chemical consumed at a treatment sy [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string infoChemicalConsumptionCaustic {
            get {
                return ResourceManager.GetString("infoChemicalConsumptionCaustic", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Methods to estimate chemical consumption.
        ///
        ///Stoichiometric - Estimates the annual lime consumption by calculating the acidity loading in lbs/year as CaCO3 and using stoichiometric conversions to reexpress the loading in terms of lime or hydrated lime.  
        ///
        ///Titration - Users can input the results of performing a bench scale titration of mine drainage to determine the lbs of lime products required to treat each gallon of mine drainage. 
        ///
        ///User-Specified Dry Ton Equivalent - This  method allows users to spec [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string infoChemicalConsumptionDL {
            get {
                return ResourceManager.GetString("infoChemicalConsumptionDL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Methods to estimate chemical consumption.
        ///
        ///Stoichiometric - Estimates caustic consumption by multiplying the acidity as CaCO3 by flow (gpm) and using stoichiometric conversions to calculate the amount of  hydrated lime slurry. 
        ///
        ///Titration - Users can input the results of performing a bench scale titration of mine drainage to determine the gallons of caustic required to treat each gallon of mine drainage. 
        ///
        ///User-Specified Dry Ton Equivalent - This  method allows users to specify the annual amount of ch [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string infoChemicalConsumptionLS {
            get {
                return ResourceManager.GetString("infoChemicalConsumptionLS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Information about the Caustic Soda solution.
        ///
        ///Caustic Soda Solution is Sodium Hydroxide (NaOH). User selects the percentage of Caustic solution.
        ///
        ///Caustic Soda Purity is the purity of Caustic Soda.
        ///
        ///Caustic Soda Mixing Efficiency is a way to add additional caustic reagent to account for a loss of caustic due to incomplete mixing. For example, caustic dispensed into very slow-flowing water may not mix properly. 
        ///
        ///Caustic Soda Unit Cost is the unit cost to purchase and deliver the Caustic Soda.
        ///    .
        /// </summary>
        internal static string infoChemicalSolutionCaustic {
            get {
                return ResourceManager.GetString("infoChemicalSolutionCaustic", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Information about the Dry Lime Products.
        ///
        ///Lime (quicklime) (CaO): Lime is manufactured as a &gt; 90% pure powder or pebble (pebble lime) by calcining high Ca-content limestone to exsolve CO2: CaCO3 + Heat = CaO + CO2.  Pebble lime can be added directly to a waste water stream, however, this method results in incomplete dissolution due to incomplete hydration and small surface area available for reaction. In most applications, lime is mixed with water in a slaker for conversion to hydrated lime before being a [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string infoChemicalSolutionDL {
            get {
                return ResourceManager.GetString("infoChemicalSolutionDL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Information about the Pre Manufactured Hydrated Lime Slurry.
        ///
        ///Hydrated Lime Slurry - Hydrated lime slurry is a manufactured product consisting of Ca(OH)2 particles suspended in water. Users must specify the weight percent of Ca(OH)2 particles suspended in water to accurately estimate the annual consumption. 
        ///
        ///Purity of Lime - Purity of Ca(OH)2 (Lime) used to manufacture slurry. 
        ///
        ///Dissolution Efficiency - Dissolution  Efficiency is a way to add additional slurry to account for a loss of slurry due to i [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string infoChemicalSolutionLS {
            get {
                return ResourceManager.GetString("infoChemicalSolutionLS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A Clarifier is ....
        /// </summary>
        internal static string infoClarifier {
            get {
                return ResourceManager.GetString("infoClarifier", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Clarifier design contains two options ....
        /// </summary>
        internal static string infoClarifierDesignClarifier {
            get {
                return ResourceManager.GetString("infoClarifierDesignClarifier", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Conveyance Pumping is.
        /// </summary>
        internal static string infoConveyancePipelinePumping {
            get {
                return ResourceManager.GetString("infoConveyancePipelinePumping", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A Dry Lime is.
        /// </summary>
        internal static string infoDS {
            get {
                return ResourceManager.GetString("infoDS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Information about the equipment used.  If Automated System not selected, a manual drip system using valve(s) is assumed treatment setup. 
        ///
        ///Automated system is used to automate dispensing of caustic soda.  
        ///
        ///Proportional Integral Derivative (PID) pH Controller is an electronic control system that coornidates dispensing rate of caustic soda based on pH reading.
        ///
        ///pH Probe Cost is the cost of the pH Probe.
        ///
        ///Chemical Metering Pump Electric Rate is the rate for all costs associated with electric bill (i.e [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string infoEquipmentCaustic {
            get {
                return ResourceManager.GetString("infoEquipmentCaustic", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Equipment information ....
        /// </summary>
        internal static string infoEquipmentClarifier {
            get {
                return ResourceManager.GetString("infoEquipmentClarifier", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Equipment and System Installation
        ///
        ///1. Storage and Dispensing System - This section allows users to develop cost estimates for either a complete (turnkey) lime (CaO) slaking or hydrated lime (Ca(OH)2) system (silo, bin vibrator, dust collection, screw feeder, slaker, slurry  tank, slurry pumps, slurry lines, heater, control panel, etc.). 
        ///
        ///Electric Rate: This rate should reflect all costs associated with electric bill (i.e. fees, taxes, etc.).
        ///
        ///Dust Collector Blower: The dust collector blower is used t [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string infoEquipmentDL {
            get {
                return ResourceManager.GetString("infoEquipmentDL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Information about the equipment used.  
        ///
        ///STORAGE AND DISPENSING SYSTEM
        ///This section allows users to develop cost estimates for the lime slurry storage and dispensing equipment. 
        ///
        ///Electric Rate: This rate should reflect all costs associated with electric bill (i.e. fees, taxes, etc.).
        ///
        ///Slurry Storage Tank: A 15 ft (height) by 10 ft diameter,  8,800 gallon  fiberglass tank is used in the cost model. This tank capacity is commonly used in the Eastern U.S. coal fields to take advantage of builk delivery  [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string infoEquipmentLS {
            get {
                return ResourceManager.GetString("infoEquipmentLS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The various layers of a pond are contained within this section.  Each layer contains corresponding dimensions/properties and/or costs.
        ///
        ///SOIL COVER
        ///The soil cover layer is the top layer used to serve as a barrier to keep atmospheric oxygen from the limestone layer in order to create the anoxic conditions necessary for the limestone drain to function as an ALD.
        ///
        ///Soil Cover Depth is the user specified depth of soil cover layer placed over the limestone layer.
        ///
        ///Soil Replacement Unit Cost is the unit cost [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string infoLayerMaterialsALD {
            get {
                return ResourceManager.GetString("infoLayerMaterialsALD", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The various layers of a pond are contained within this section.  Each layer contains corresponding dimensions/properties and/or costs.
        ///
        ///FREEBOARD
        ///The freeboard layer is defined as the volume within the constructed basin between the top elevation of the berm and the design water surface or top of bioreactor mixture elevation, whichever is higher.  The purpose of the Freeboard layer is to accommodate a rising water surface elevation caused by increased flow or plugging in the bioreactor mixture.  
        ///
        ///Freeb [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string infoLayerMaterialsBIO {
            get {
                return ResourceManager.GetString("infoLayerMaterialsBIO", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The various layers of a pond are contained within this section.  Each layer contains corresponding dimensions/properties and/or costs.
        ///
        ///FREEBOARD
        ///The depth of the Freeboard layer is defined as the difference between the top elevation of the berm and the design water surface elevation or top of limestone elevation, whichever is higher.  The purpose of the Freeboard layer is to accommodate a rising water surface elevation caused by increased flow or plugging in the limestone. 
        ///
        ///
        ///WATER
        ///The depth of the  [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string infoLayerMaterialsLSB {
            get {
                return ResourceManager.GetString("infoLayerMaterialsLSB", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The various layers of a pond are contained within this section.  Each layer contains corresponding dimensions/properties and/or costs.
        ///
        ///FREEBOARD
        ///The depth of the Freeboard layer is defined as the difference between the top elevation of the berm and the design water surface elevation or top of limestone elevation, whichever is higher.  The purpose of the Freeboard layer is to accommodate a rising water surface elevation caused by increased flow or plugging in the limestone. 
        ///
        ///Depth of Freeboard Layer i [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string infoLayerMaterialsMRB {
            get {
                return ResourceManager.GetString("infoLayerMaterialsMRB", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The various layers of a pond are contained within this section.  Each layer contains corresponding dimensions/properties and/or costs.
        ///
        ///FREEBOARD
        ///The depth of the Freeboard layer is defined as the difference between the top elevation of the VFP and the design water surface elevation.  The purpose of the Freeboard layer is to accommodate a rising water surface elevation caused by increased flow or plugging in the limestone and compost layers of the VFP.  
        ///
        ///
        ///OXIDATION
        ///
        ///
        ///SETTLING / RETENTION
        ///
        ///
        ///SLUD [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string infoLayerMaterialsPONDS {
            get {
                return ResourceManager.GetString("infoLayerMaterialsPONDS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The various layers of a pond are contained within this section.  Each layer contains corresponding dimensions/properties and/or costs.
        ///
        ///FREEBOARD
        ///The depth of the Freeboard layer is defined as the difference between the top elevation of the VFP and the design water surface elevation.  The purpose of the Freeboard layer is to accommodate a rising water surface elevation caused by increased flow or plugging in the limestone and compost layers of the VFP.  
        ///
        ///
        ///WATER
        ///The depth of the Water layer is define [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string infoLayerMaterialsVFP {
            get {
                return ResourceManager.GetString("infoLayerMaterialsVFP", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The various layers of a pond are contained within this section.  Each layer contains corresponding dimensions/properties and/or costs.
        ///
        ///FREEBOARD
        ///The freeboard layer is defined as the layer between the top elevation of the berm and the design water surface elevation.  The purpose of the Freeboard layer is to accommodate a rising water surface elevation caused by increased flow and/or accumulation of wetland vegetation.
        ///
        ///WATER
        ///The water layer is defined as the layer between the top of the compost mix l [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string infoLayerMaterialsWetland {
            get {
                return ResourceManager.GetString("infoLayerMaterialsWetland", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A Limestone Bed is.
        /// </summary>
        internal static string infoLimestoneBedLSB {
            get {
                return ResourceManager.GetString("infoLimestoneBedLSB", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A Lime Slurry treatment is ....
        /// </summary>
        internal static string infoLS {
            get {
                return ResourceManager.GetString("infoLS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A Manganese Removal Bed is.
        /// </summary>
        internal static string infoManganeseRemovalBedMRB {
            get {
                return ResourceManager.GetString("infoManganeseRemovalBedMRB", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Other items is a cost category that contains a variety of commonly used items used in passive treatment systems. Users can set the unit cost to $0.00 to prevent AMDTreat from considering an item in the total cost.
        ///
        ///Valves Quantity represents the number of values in the influent and effluent piping network.
        ///
        ///Valves Unit Cost is the unit cost to purchase and install each valve. Default cost includes purchase, man hole, valve, housing, and installation.
        ///
        ///Intake Structure Quantity represents the number of [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string infoOtherItemsALD {
            get {
                return ResourceManager.GetString("infoOtherItemsALD", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Information about the other annual cost items used.  This cost category that allows users to specify equipment and annual costs not otherwise covered in this module. 
        ///    .
        /// </summary>
        internal static string infoOtherItemsAnnualCaustic {
            get {
                return ResourceManager.GetString("infoOtherItemsAnnualCaustic", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Information about the other annual cost items used.  This cost category that allows users to specify equipment and annual costs not otherwise covered in this module. 
        ///    .
        /// </summary>
        internal static string infoOtherItemsAnnualClarifier {
            get {
                return ResourceManager.GetString("infoOtherItemsAnnualClarifier", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Information about the other annual cost items used.  This cost category that allows users to specify equipment and annual costs not otherwise covered in this module. 
        ///    .
        /// </summary>
        internal static string infoOtherItemsAnnualDL {
            get {
                return ResourceManager.GetString("infoOtherItemsAnnualDL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Information about the other annual cost items used.  This cost category that allows users to specify equipment and annual costs not otherwise covered in this module. 
        ///    .
        /// </summary>
        internal static string infoOtherItemsAnnualLS {
            get {
                return ResourceManager.GetString("infoOtherItemsAnnualLS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Information about the other annual cost items used.  This cost category that allows users to specify equipment and annual costs not otherwise covered in this module. 
        ///    .
        /// </summary>
        internal static string infoOtherItemsAnnualPONDS {
            get {
                return ResourceManager.GetString("infoOtherItemsAnnualPONDS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Other items is a cost category that contains a variety of commonly used items used in passive treatment systems. Users can set the unit cost to $0.0 to prevent AMDTreat from considering an item in the total cost.
        ///
        ///Valves Quantity represents the number of values in the influent and effluent piping network.
        ///
        ///Valves Unit Cost is the unit cost to purchase and install each valve. Default cost includes purchase, man hole, valve, housing, and installation.
        ///
        ///Intake Structure Quantity represents the number of  [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string infoOtherItemsBIO {
            get {
                return ResourceManager.GetString("infoOtherItemsBIO", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Information about the other capital cost items used.  This cost category that allows users to specify equipment and capital costs not otherwise covered in this module. 
        ///    .
        /// </summary>
        internal static string infoOtherItemsCapitalCaustic {
            get {
                return ResourceManager.GetString("infoOtherItemsCapitalCaustic", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Information about the other capital cost items used.  This cost category that allows users to specify equipment and capital costs not otherwise covered in this module. 
        ///    .
        /// </summary>
        internal static string infoOtherItemsCapitalClarifier {
            get {
                return ResourceManager.GetString("infoOtherItemsCapitalClarifier", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Information about the other capital cost items used.  This cost category that allows users to specify equipment and capital costs not otherwise covered in this module. 
        ///    .
        /// </summary>
        internal static string infoOtherItemsCapitalDL {
            get {
                return ResourceManager.GetString("infoOtherItemsCapitalDL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Information about the other capital cost items used.  This cost category that allows users to specify equipment and capital costs not otherwise covered in this module. 
        ///    .
        /// </summary>
        internal static string infoOtherItemsCapitalLS {
            get {
                return ResourceManager.GetString("infoOtherItemsCapitalLS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Information about the other capital cost items used.  This cost category that allows users to specify equipment and capital costs not otherwise covered in this module. 
        ///    .
        /// </summary>
        internal static string infoOtherItemsCapitalPONDS {
            get {
                return ResourceManager.GetString("infoOtherItemsCapitalPONDS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Information about the other capital cost items used.  This cost category that allows users to specify equipment and capital costs not otherwise covered in this module. 
        ///    .
        /// </summary>
        internal static string infoOtherItemsCapitalSiteDevelopment {
            get {
                return ResourceManager.GetString("infoOtherItemsCapitalSiteDevelopment", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Other items is a cost category that contains a variety of commonly used items used in passive treatment systems. Users can set the unit cost to $0.0 to prevent AMDTreat from considering an item in the total cost.
        ///
        ///Valves Quantity represents the number of values in the influent and effluent piping network.
        ///
        ///Valves Unit Cost is the unit cost to purchase and install each valve. Default cost includes purchase, man hole, valve, housing, and installation.
        ///
        ///Intake Structure Quantity represents the number of  [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string infoOtherItemsLSB {
            get {
                return ResourceManager.GetString("infoOtherItemsLSB", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Other items is a cost category that contains a variety of commonly used items in passive treatment systems. Users can set the unit cost to $0.0 or set the quantity to zero (0) to prevent AMDTreat from considering an item in the total cost.
        ///
        ///Valves Quantity represents the number of values in the influent and effluent piping network.
        ///
        ///Valves Unit Cost is the unit cost to purchase and install each valve. Default cost includes purchase, man hole, valve, housing, and installation.
        ///
        ///Flow Distribution Struct [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string infoOtherItemsMRB {
            get {
                return ResourceManager.GetString("infoOtherItemsMRB", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Other items is a cost category that contains a variety of commonly used items used in passive treatment systems. Users can set the unit cost to $0.0 to prevent AMDTreat from considering an item in the total cost.
        ///
        ///Valves Quantity represents the number of values in the influent and effluent piping network.
        ///
        ///Valves Unit Cost is the unit cost to purchase and install each valve. Default cost includes purchase, man hole, valve, housing, and installation.
        ///
        ///Intake Structure Quantity represents the number of  [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string infoOtherItemsPONDS {
            get {
                return ResourceManager.GetString("infoOtherItemsPONDS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Other items is a cost category that contains a variety of commonly used items used in passive treatment systems. Users can set the unit cost to $0.0 to prevent AMDTreat from considering an item in the total cost.
        ///
        ///Valves Quantity represents the number of values in the influent and effluent piping network.
        ///
        ///Valves Unit Cost is the unit cost to purchase and install each valve. Default cost includes purchase, man hole, valve, housing, and installation.
        ///
        ///Intake Structure Quantity represents the number of  [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string infoOtherItemsVFP {
            get {
                return ResourceManager.GetString("infoOtherItemsVFP", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Other items is a cost category that contains a variety of commonly used items used in passive treatment systems. Users can set the unit cost to $0.0 to prevent AMDTreat from considering an item in the total cost.
        ///
        ///Flow Distribution Structure Quantity represents the number of Flow Distribution Structures used to distribute influent or effluent flow. A Flow Distribution Structure can be used to distribute flow to multiple VFPs organized in parallel and used to bypass flows larger than the design flow rate.  [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string infoOtherItemsWetland {
            get {
                return ResourceManager.GetString("infoOtherItemsWetland", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Ponds  is.
        /// </summary>
        internal static string infoPONDS {
            get {
                return ResourceManager.GetString("infoPONDS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Pumping  is.
        /// </summary>
        internal static string infoPumping {
            get {
                return ResourceManager.GetString("infoPumping", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Recapitalization costs, the net present value of replacement and annual costs, is the amount of money required today to pay for all future annual and replacement costs for a given rate of return, inflation rate, and calculation period.  The recapitalization cost represents the total cost of operating the ALD, in &quot;today&apos;s dollars&quot;, over a specified time frame.
        ///
        ///Life Cycle represents the time interval for expected replacement
        ///
        ///Replacement % represents the expected percentage of replacement of the item eac [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string infoRecapitalizationCostALD {
            get {
                return ResourceManager.GetString("infoRecapitalizationCostALD", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Recapitalization costs, the net present value of replacement and annual costs, is the amount of money required today to pay for all future annual and replacement costs for a given rate of return, inflation rate, and calculation period.  The recapitalization cost represents the total cost of operating the bioreactor, in &quot;today&apos;s dollars&quot;, over a specified time frame.
        ///
        ///Life Cycle represents the time interval for expected replacement
        ///
        ///Replacement % represents the expected percentage of replacement of the i [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string infoRecapitalizationCostBIO {
            get {
                return ResourceManager.GetString("infoRecapitalizationCostBIO", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Recapitalization costs, the net present value of replacement and annual costs, is the amount of money required today to pay for all future annual and replacement costs for a given rate of return, inflation rate, and calculation period.  The recapitalization cost represents the total cost of operating the pond, in &quot;today&apos;s dollars&quot;, over a specified time frame.
        ///
        ///Life Cycle represents the time interval for expected replacement
        ///
        ///Replacement % represents the expected percentage of replacement of the item ea [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string infoRecapitalizationCostCaustic {
            get {
                return ResourceManager.GetString("infoRecapitalizationCostCaustic", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Recapitalization costs, the net present value of replacement and annual costs, is the amount of money required today to pay for all future annual and replacement costs for a given rate of return, inflation rate, and calculation period.  The recapitalization cost represents the total cost of operation, in &quot;today&apos;s dollars&quot;, over a specified time frame.
        ///
        ///Life Cycle represents the time interval for expected replacement
        ///
        ///Replacement % represents the expected percentage of replacement of the item each replac [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string infoRecapitalizationCostCD {
            get {
                return ResourceManager.GetString("infoRecapitalizationCostCD", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Recapitalization costs, the net present value of replacement and annual costs, is the amount of money required today to pay for all future annual and replacement costs for a given rate of return, inflation rate, and calculation period.  The recapitalization cost represents the total cost of operation, in &quot;today&apos;s dollars&quot;, over a specified time frame.
        ///
        ///Life Cycle represents the time interval for expected replacement
        ///
        ///Replacement % represents the expected percentage of replacement of the item each replac [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string infoRecapitalizationCostClarifier {
            get {
                return ResourceManager.GetString("infoRecapitalizationCostClarifier", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Recapitalization costs, the net present value of replacement and annual costs, is the amount of money required today to pay for all future annual and replacement costs for a given rate of return, inflation rate, and calculation period.  The recapitalization cost represents the total cost of operation, in &quot;today&apos;s dollars&quot;, over a specified time frame.
        ///
        ///Life Cycle represents the time interval for expected replacement
        ///
        ///Replacement % represents the expected percentage of replacement of the item each replac [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string infoRecapitalizationCostDL {
            get {
                return ResourceManager.GetString("infoRecapitalizationCostDL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Recapitalization costs, the net present value of replacement and annual costs, is the amount of money required today to pay for all future annual and replacement costs for a given rate of return, inflation rate, and calculation period.  The recapitalization cost represents the total cost of operation, in &quot;today&apos;s dollars&quot;, over a specified time frame.
        ///
        ///Life Cycle represents the time interval for expected replacement
        ///
        ///Replacement % represents the expected percentage of replacement of the item each replac [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string infoRecapitalizationCostLS {
            get {
                return ResourceManager.GetString("infoRecapitalizationCostLS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Recapitalization costs, the net present value of replacement and annual costs, is the amount of money required today to pay for all future annual and replacement costs for a given rate of return, inflation rate, and calculation period.  The recapitalization cost represents the total cost of operating the pond, in &quot;today&apos;s dollars&quot;, over a specified time frame.
        ///
        ///Life Cycle represents the time interval for expected replacement
        ///
        ///Replacement % represents the expected percentage of replacement of the item ea [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string infoRecapitalizationCostLSB {
            get {
                return ResourceManager.GetString("infoRecapitalizationCostLSB", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Recapitalization costs, the net present value of replacement and annual costs, is the amount of money required today to pay for all future annual and replacement costs for a given rate of return, inflation rate, and calculation period.  The recapitalization cost represents the total cost of operating the pond, in &quot;today&apos;s dollars&quot;, over a specified time frame.
        ///
        ///Life Cycle represents the time interval for expected replacement
        ///
        ///Replacement % represents the expected percentage of replacement of the item ea [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string infoRecapitalizationCostMRB {
            get {
                return ResourceManager.GetString("infoRecapitalizationCostMRB", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Recapitalization costs, the net present value of replacement and annual costs, is the amount of money required today to pay for all future annual and replacement costs for a given rate of return, inflation rate, and calculation period.  The recapitalization cost represents the total cost of operating the pond, in &quot;today&apos;s dollars&quot;, over a specified time frame.
        ///
        ///Life Cycle represents the time interval for expected replacement
        ///
        ///Replacement % represents the expected percentage of replacement of the item ea [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string infoRecapitalizationCostPONDS {
            get {
                return ResourceManager.GetString("infoRecapitalizationCostPONDS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Recapitalization costs, the net present value of replacement and annual costs, is the amount of money required today to pay for all future annual and replacement costs for a given rate of return, inflation rate, and calculation period.  The recapitalization cost represents the total cost of operating the pond, in &quot;today&apos;s dollars&quot;, over a specified time frame.
        ///
        ///Life Cycle represents the time interval for expected replacement
        ///
        ///Replacement % represents the expected percentage of replacement of the item ea [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string infoRecapitalizationCostPumping {
            get {
                return ResourceManager.GetString("infoRecapitalizationCostPumping", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Recapitalization costs, the net present value of replacement and annual costs, is the amount of money required today to pay for all future annual and replacement costs for a given rate of return, inflation rate, and calculation period.  The recapitalization cost represents the total cost of operation, in &quot;today&apos;s dollars&quot;, over a specified time frame.
        ///
        ///Life Cycle represents the time interval for expected replacement
        ///
        ///Replacement % represents the expected percentage of replacement of the item each replac [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string infoRecapitalizationCostSAMPLING {
            get {
                return ResourceManager.GetString("infoRecapitalizationCostSAMPLING", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Recapitalization costs, the net present value of replacement and annual costs, is the amount of money required today to pay for all future annual and replacement costs for a given rate of return, inflation rate, and calculation period.  The recapitalization cost represents the total cost of operation, in &quot;today&apos;s dollars&quot;, over a specified time frame.
        ///
        ///Life Cycle represents the time interval for expected replacement
        ///
        ///Replacement % represents the expected percentage of replacement of the item each replac [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string infoRecapitalizationCostSiteDevelopment {
            get {
                return ResourceManager.GetString("infoRecapitalizationCostSiteDevelopment", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Recapitalization costs, the net present value of replacement and annual costs, is the amount of money required today to pay for all future annual and replacement costs for a given rate of return, inflation rate, and calculation period.  The recapitalization cost represents the total cost of operating the pond, in &quot;today&apos;s dollars&quot;, over a specified time frame.
        ///
        ///Life Cycle represents the time interval for expected replacement
        ///
        ///Replacement % represents the expected percentage of replacement of the item ea [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string infoRecapitalizationCostVFP {
            get {
                return ResourceManager.GetString("infoRecapitalizationCostVFP", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Recapitalization costs, the net present value of replacement and annual costs, is the amount of money required today to pay for all future annual and replacement costs for a given rate of return, inflation rate, and calculation period.  The recapitalization cost represents the total cost of operating the pond, in &quot;today&apos;s dollars&quot;, over a specified time frame.
        ///
        ///Life Cycle represents the time interval for expected replacement
        ///
        ///Replacement % represents the expected percentage of replacement of the item ea [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string infoRecapitalizationCostWetland {
            get {
                return ResourceManager.GetString("infoRecapitalizationCostWetland", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Sampling is ....
        /// </summary>
        internal static string infoSAMPLING {
            get {
                return ResourceManager.GetString("infoSAMPLING", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Site development is ....
        /// </summary>
        internal static string infoSiteDevelopment {
            get {
                return ResourceManager.GetString("infoSiteDevelopment", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to PROPERTY ACQUISITION/ACCESS
        ///Land Purchase Closing Cost - Can include all costs associated with purchase of the property such as boundary survey, title search, legal fees, and easements/right-of-way issues.
        ///
        ///Annual Lease Cost - Annual cost on a per acre basis to lease any portion of the land from the property owner for either access or for any components of the treatment system.
        ///
        ///SITE WORK UNIT COST AND INFORMATION
        ///Construction Office Trailer Cost - Optional item, typically required on larger projects  [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string infoSiteDevelopmentItemsSiteDevelopment {
            get {
                return ResourceManager.GetString("infoSiteDevelopmentItemsSiteDevelopment", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to RETENTION TIME
        ///This sizing method uses Design Flow, user-specified retention time, and limestone porosity to calculate the volume of limestone required to retain the water for the specified retention time.  
        ///
        ///Retention Time is the desired retention time within limestone layer.
        ///
        ///BUREAU Of MINES (BOM)
        ///This sizing method performs two calculations to determine the mass of limestone. First, the mass of limestone needed to achieve the user-defined retention time is calculated. Next, the mass of limestone ne [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string infoSizingMethodsALD {
            get {
                return ResourceManager.GetString("infoSizingMethodsALD", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to SULFATE REDUCTION
        ///This sizing method allows users to specify the sulfate reduction rate in moles of sulfate per cubic meter per day (literature based method) and the desired sulfate concentration reduction in mg/L for estimating the volume of bioreactor mixture needed to accomplish those endpoints.
        ///
        ///ALKALINITY GENERATION RATE 
        ///Calculates the mass of limestone needed in two steps. First, the surface area of limestone is calculated by dividing the alkalinity generation rate by the daily acidity load. Then [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string infoSizingMethodsBIO {
            get {
                return ResourceManager.GetString("infoSizingMethodsBIO", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to RETENTION TIME
        ///This sizing method uses Design Flow, user-specified retention time, and limestone porosity to calculate the volume of limestone required to retain the water for the specified retention time.  This tool tip should appear right next to the sizing method itself.
        ///
        ///Retention Time is the desired retention time within limestone layer.
        ///
        ///BUREAU Of MINES (BOM)
        ///This sizing method performs two calculations to determine the mass of limestone. First, the mass of limestone needed to achieve the user-d [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string infoSizingMethodsLSB {
            get {
                return ResourceManager.GetString("infoSizingMethodsLSB", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to RETENTION TIME
        ///This sizing method uses Design Flow, user-specified retention time, and limestone porosity to calculate the volume of limestone required to retain the water for the specified retention time.  This tool tip should appear right next to the sizing method itself.
        ///
        ///Retention Time is the desired retention time within limestone layer.
        ///
        ///KINETICS
        ///This method calculates the mass of limestone needed based on user selected rate constant (k), desired Mn effluent concentration, stone gradation, void  [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string infoSizingMethodsMRB {
            get {
                return ResourceManager.GetString("infoSizingMethodsMRB", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to OXIDATION / SETTLING / SLUDGE
        ///
        ///
        ///
        ///DIMENSIONS
        ///Calculates material quantities and volumes based on user defined dimensions of length and width.  The length and width of the pond correspond to the length and width of the top of the freeboard layer.  Note that the length must be greater than or equal to the width..
        /// </summary>
        internal static string infoSizingMethodsPONDS {
            get {
                return ResourceManager.GetString("infoSizingMethodsPONDS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to RETENTION TIME
        ///This sizing method uses Design Flow, user-specified retention time, and limestone porosity to calculate the volume of limestone required to retain the water for the specified retention time.  This tool tip should appear right next to the sizing method itself.
        ///
        ///Retention Time is the desired retention time within limestone layer.
        ///
        ///BUREAU Of MINES (BOM)
        ///This sizing method performs two calculations to determine the mass of limestone. First, the mass of limestone needed to achieve the user-d [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string infoSizingMethodsVFP {
            get {
                return ResourceManager.GetString("infoSizingMethodsVFP", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to RETENTION TIME
        ///This sizing method uses Design Flow and user-specified retention time to calculate the area of the water surface within the vegetated wetland (excludes inlet and outlet pool areas).
        ///
        ///Retention Time is the desired retention time within the water layer of the wetland (excludes inlet and outlet pools).
        ///
        ///METAL REMOVAL RATES
        ///This method uses the user specified mass loading rate of both iron and manganese to determine the necessary water surface to remove the iron and manganese concentrations [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string infoSizingMethodsWetland {
            get {
                return ResourceManager.GetString("infoSizingMethodsWetland", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Sizing summary includes the sizes and amounts of materials to build the treatment..
        /// </summary>
        internal static string infoSizingSummaryALD {
            get {
                return ResourceManager.GetString("infoSizingSummaryALD", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Sizing summary includes the sizes and amounts of materials to build the treatment..
        /// </summary>
        internal static string infoSizingSummaryBIO {
            get {
                return ResourceManager.GetString("infoSizingSummaryBIO", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Sizing summary includes the sizes and amounts of materials to build the treatment..
        /// </summary>
        internal static string infoSizingSummaryCaustic {
            get {
                return ResourceManager.GetString("infoSizingSummaryCaustic", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Sizing summary includes the sizes and amounts of materials to build the ditch..
        /// </summary>
        internal static string infoSizingSummaryCD {
            get {
                return ResourceManager.GetString("infoSizingSummaryCD", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Sizing summary includes the sizes and amounts of materials to build the clarifier..
        /// </summary>
        internal static string infoSizingSummaryClarifier {
            get {
                return ResourceManager.GetString("infoSizingSummaryClarifier", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Sizing summary includes the sizes and amounts of materials to build the treatment..
        /// </summary>
        internal static string infoSizingSummaryDL {
            get {
                return ResourceManager.GetString("infoSizingSummaryDL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Sizing summary includes the sizes and amounts of materials to build the treatment..
        /// </summary>
        internal static string infoSizingSummaryLS {
            get {
                return ResourceManager.GetString("infoSizingSummaryLS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Sizing summary includes the sizes and amounts of materials to build the pond..
        /// </summary>
        internal static string infoSizingSummaryLSB {
            get {
                return ResourceManager.GetString("infoSizingSummaryLSB", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Sizing summary includes the sizes and amounts of materials to build the pond..
        /// </summary>
        internal static string infoSizingSummaryMRB {
            get {
                return ResourceManager.GetString("infoSizingSummaryMRB", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Sizing summary includes the sizes and amounts of materials to build the pond..
        /// </summary>
        internal static string infoSizingSummaryPONDS {
            get {
                return ResourceManager.GetString("infoSizingSummaryPONDS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Sizing summary includes the sizes and amounts of materials for pumping..
        /// </summary>
        internal static string infoSizingSummaryPumping {
            get {
                return ResourceManager.GetString("infoSizingSummaryPumping", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Sizing summary includes the sizes and amounts of materials to build the clarifier..
        /// </summary>
        internal static string infoSizingSummarySiteDevelopment {
            get {
                return ResourceManager.GetString("infoSizingSummarySiteDevelopment", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Sizing summary includes the sizes and amounts of materials to build the pond..
        /// </summary>
        internal static string infoSizingSummaryVFP {
            get {
                return ResourceManager.GetString("infoSizingSummaryVFP", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Sizing summary includes the sizes and amounts of materials to build the pond..
        /// </summary>
        internal static string infoSizingSummaryWetland {
            get {
                return ResourceManager.GetString("infoSizingSummaryWetland", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Sludge Disposal Pipeline is ....
        /// </summary>
        internal static string infoSludgeDisposalPipelineClarifier {
            get {
                return ResourceManager.GetString("infoSludgeDisposalPipelineClarifier", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Sludge Generation is ...
        ///
        ///Sludge Handling is ...
        ///
        ///Sludge Disposal is ....
        /// </summary>
        internal static string infoSludgeGenerationHandlingDisposalPONDS {
            get {
                return ResourceManager.GetString("infoSludgeGenerationHandlingDisposalPONDS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Pond Inside Slope - the horizontal to vertical ratio of the inside slope of the treatment system.  Note, a value of 2 means that for every 1 foot of depth the slope extends 2 feet horizontally.
        ///
        ///Bottom Layer Length to Width Ratio - this ratio represents the relationship between the bottom length and bottom width of the anoxic limestone drain. A ratio of 2 means the bottom length is twice the bottom width. Users can define the ratio for all sizing methods except for the Dimensions method. The ratio is requ [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string infoSystemPropertiesALD {
            get {
                return ResourceManager.GetString("infoSystemPropertiesALD", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Pond Inside Slope - the horizontal to vertical ratio of the inside slope of the treatment system.  Note, a value of 2 means that for every 1 foot of depth the slope extends 2 feet horizontally.
        ///
        ///Bottom Layer Length to Width Ratio - this ratio represents the relationship between the bottom length and bottom width of the Bio Mix layer. A ratio of 2 means the bottom length is twice the bottom width. Users can define the ratio for all sizing methods except for the Dimensions method. The ratio is required to c [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string infoSystemPropertiesBIO {
            get {
                return ResourceManager.GetString("infoSystemPropertiesBIO", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Aggregate Ditch Length - ?
        ///Grass Ditch Length is ?.
        /// </summary>
        internal static string infoSystemPropertiesCD {
            get {
                return ResourceManager.GetString("infoSystemPropertiesCD", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Pond Inside Slope - the horizontal to vertical ratio of the inside slope of the treatment system.  Note, a value of 2 means that for every 1 foot of depth the slope extends 2 feet horizontally.
        ///
        ///Bottom Layer Length to Width Ratio - this ratio represents the relationship between the bottom length and bottom width of the limestone layer. A ratio of 2 means the bottom length is twice the bottom width. Users can define the ratio for all sizing methods except for the Dimensions method. The ratio is required to [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string infoSystemPropertiesLSB {
            get {
                return ResourceManager.GetString("infoSystemPropertiesLSB", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Pond Inside Slope - the horizontal to vertical ratio of the inside slope of the treatment system.  Note, a value of 2 means that for every 1 foot of depth the slope extends 2 feet horizontally.
        ///
        ///Bottom Layer Length to Width Ratio - this ratio represents the relationship between the bottom length and bottom width of the limestone layer. A ratio of 2 means the bottom length is twice the bottom width. Users can define the ratio for all sizing methods except for the Dimensions method. The ratio is required to [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string infoSystemPropertiesMRB {
            get {
                return ResourceManager.GetString("infoSystemPropertiesMRB", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Pond Inside Slope - the horizontal to vertical ratio of the inside slope of the treatment system.  Note, a value of 2 means that for every 1 foot of depth the slope extends 2 feet horizontally.
        ///
        ///Bottom Layer Length to Width Ratio - this ratio represents the relationship between the bottom length and bottom width of the settling layer. A ratio of 2 means the bottom length is twice the bottom width. Users can define the ratio for all sizing methods except for the Dimensions method. The ratio is required to  [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string infoSystemPropertiesPONDS {
            get {
                return ResourceManager.GetString("infoSystemPropertiesPONDS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Properties Information for Sampling ....
        /// </summary>
        internal static string infoSystemPropertiesSAMPLING {
            get {
                return ResourceManager.GetString("infoSystemPropertiesSAMPLING", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Pond Inside Slope - the horizontal to vertical ratio of the inside slope of the treatment system.  Note, a value of 2 means that for every 1 foot of depth the slope extends 2 feet horizontally.
        ///
        ///Bottom Layer Length to Width Ratio - this ratio represents the relationship between the bottom length and bottom width of the limestone layer. A ratio of 2 means the bottom length is twice the bottom width. Users can define the ratio for all sizing methods except for the Dimensions method. The ratio is required to [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string infoSystemPropertiesVFP {
            get {
                return ResourceManager.GetString("infoSystemPropertiesVFP", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Pond Inside Slope - the horizontal to vertical ratio of the inside slope of the treatment system.  Note, a value of 2 means that for every 1 foot of depth the slope extends 2 feet horizontally.
        ///
        ///Bottom Layer Length to Width Ratio - this ratio represents the relationship between the bottom length and bottom width of the vegetated wetland (excludes inlet and outlet pool). A ratio of 2 means the bottom length is twice the bottom width. Users can define the ratio for all sizing methods except for the Dimensio [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string infoSystemPropertiesWetland {
            get {
                return ResourceManager.GetString("infoSystemPropertiesWetland", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A Vertical Flow Pond (VFP) is an acid mine treatment system where acidic water flows through multiple treament layers to neutralize the water.  The water first flows through an organic mix layer where oxygen in the water is removed.  The water then moves through a limestone layer which neutralizes the acidity of the water..
        /// </summary>
        internal static string infoVerticalFlowPondVFP {
            get {
                return ResourceManager.GetString("infoVerticalFlowPondVFP", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Vertical Pumping Turbine Boreholes is.
        /// </summary>
        internal static string infoVerticalTurbinePumpBoreHolesPumping {
            get {
                return ResourceManager.GetString("infoVerticalTurbinePumpBoreHolesPumping", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Vertical Turbine Pumps are.
        /// </summary>
        internal static string infoVerticalTurbinePumpsPumping {
            get {
                return ResourceManager.GetString("infoVerticalTurbinePumpsPumping", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Design Flow - flow rate used to size passive treatment systems, influent pumps, clarifiers, and reaction tanks.
        ///
        ///Net Acidity - acidity used to estimate chemical consumption..
        /// </summary>
        internal static string infoWaterQualityALD {
            get {
                return ResourceManager.GetString("infoWaterQualityALD", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Design Flow - flow rate used to size passive treatment systems, influent pumps, clarifiers, and reaction tanks.
        ///
        ///Net Acidity - acidity used to estimate chemical consumption.
        ///
        ///Sulfate - sulfate concentration reduction amount..
        /// </summary>
        internal static string infoWaterQualityBIO {
            get {
                return ResourceManager.GetString("infoWaterQualityBIO", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Typical Flow - flow rate in gallons per minute.
        ///
        ///Net Acidity - acidity used to estimate chemical consumption..
        /// </summary>
        internal static string infoWaterQualityCaustic {
            get {
                return ResourceManager.GetString("infoWaterQualityCaustic", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Design Flow - flow rate in gallons per minute.
        ///
        ///Typical Flow - flow rate in gallons per minute.
        ///
        ///Ferrous Iron - 
        ///
        ///Ferric Iron - 
        ///
        ///Manganese - 
        ///
        ///Aluminum -.
        /// </summary>
        internal static string infoWaterQualityClarifier {
            get {
                return ResourceManager.GetString("infoWaterQualityClarifier", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Typical Flow - flow rate in gallons per minute.
        ///
        ///Hot Acidity - acidity used to estimate chemical consumption..
        /// </summary>
        internal static string infoWaterQualityDL {
            get {
                return ResourceManager.GetString("infoWaterQualityDL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Typical Flow - flow rate in gallons per minute.
        ///
        ///Hot Acidity - acidity used to estimate chemical consumption..
        /// </summary>
        internal static string infoWaterQualityLS {
            get {
                return ResourceManager.GetString("infoWaterQualityLS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Design Flow - flow rate used to size passive treatment systems, influent pumps, clarifiers, and reaction tanks.
        ///
        ///Net Acidity - acidity used to estimate chemical consumption..
        /// </summary>
        internal static string infoWaterQualityLSB {
            get {
                return ResourceManager.GetString("infoWaterQualityLSB", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Design Flow - flow rate used to size passive treatment systems, influent pumps, clarifiers, and reaction tanks.
        ///
        ///Dissolved Manganese - amount of dissolved manganese..
        /// </summary>
        internal static string infoWaterQualityMRB {
            get {
                return ResourceManager.GetString("infoWaterQualityMRB", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Design Flow - flow rate in gallons per minute.
        ///
        ///Typical Flow - flow rate in gallons per minute.
        ///
        ///.
        /// </summary>
        internal static string infoWaterQualityPONDS {
            get {
                return ResourceManager.GetString("infoWaterQualityPONDS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Design Flow - flow rate used to size passive treatment systems, influent pumps, clarifiers, and reaction tanks.
        ///
        ///Net Acidity - acidity used to estimate chemical consumption..
        /// </summary>
        internal static string infoWaterQualityVFP {
            get {
                return ResourceManager.GetString("infoWaterQualityVFP", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Design Flow - flow rate used to size passive treatment systems, influent pumps, clarifiers, and reaction tanks.
        ///
        ///Net Acidity - acidity used to estimate chemical consumption.
        ///
        ///Dissolved Iron - dissolved iron.
        ///
        ///Dissolved Manganese - dissolved manganese.
        ///
        ///pH - pH..
        /// </summary>
        internal static string infoWaterQualityWetland {
            get {
                return ResourceManager.GetString("infoWaterQualityWetland", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A Wetland is.
        /// </summary>
        internal static string infoWetland {
            get {
                return ResourceManager.GetString("infoWetland", resourceCulture);
            }
        }
    }
}
